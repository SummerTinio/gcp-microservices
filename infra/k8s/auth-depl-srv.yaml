## auth-depl, auth-srv, auth-mongo, auth-mongo-srv
## all srv's inside this file === ClusterIP

### FOR THE DEPLOYMENT ###
# apiVersion === version of Kubernetes' API u wanna use
apiVersion: apps/v1
# kind === the type of Kubernetes Object u want (e.g. Deployment, Service)
kind: Deployment
metadata:
  # name === Use this name when referencing this particular object in other k8s files!
  name: auth-depl

# spec 1d === specifications for EACH POD (in a Deployment)
spec:
  # replicas === in 1 Pod, how many Copies of that image?
  replicas: 1
  # ***selector here***
  selector:
    matchLabels:
        app: auth
### FOR EACH POD ###
  # template === exact instructions on how to create that Pod
  template:
    metadata:
      # ***must match with label here***
      labels:
        app: auth

    ### FOR EACH CONTAINER ###
    # spec 2d === specifications for EACH CONTAINER (in a Pod)
    spec:
      containers:
        # container name === used for logging purposes
        - name: auth # used to be auth-container
          image: us.gcr.io/ticketing-239039/auth #:68590a2
          stdin: true # added this
          tty: true # and this
          env:
            - name: JWT_KEY # name of env variable as it shows up in that container's process.env
              valueFrom:
                secretKeyRef:
                  name: jwt-secret # how u named your secret (k get secrets)
                  key: JWT_KEY # key you set
---
### FOR THE SERVICE ASSOCIATED WITH THIS DEPLOYMENT ###
## i.e. our access point into its pods ##

### FOR THE SERVICE ###
apiVersion: v1
kind: Service
metadata:
  name: auth-srv # reference this name if you need to in a different file

### FOR THE CLUSTERIP ###
spec:
  type: ClusterIP
  selector:
    app: auth # must match label given to individual Pod
  ports:
    - name: auth
      protocol: TCP
      port: 3000 # ClusterIP port -- specifically attached to the Service. Note: nodePort will be 30000+

      ### FROM THE EXPRESS SERVER ###
      targetPort: 3000 # port from ur Express server -- specifically attached to the Pod (dynamic)
---
# for auth's own MongoDB instance

### FOR THE DEPLOYMENT ###
apiVersion: apps/v1
kind: Deployment # to create a pod w/ 1 container
metadata:
  name: auth-mongo-depl

### FOR EACH POD ###
spec:
  replicas: 1
  selector:
    matchLabels: # matchLabels will allow the Deployment to find the pods it created
      app: auth-mongo # *** match this ***
  template:
    metadata:
      labels:
        app: auth-mongo # *** to this (label will be applied to the pod) ***
    
    ### FOR EACH CONTAINER ###
    spec:
      containers:
        - name: auth-mongo # pod name === container name (in this case)
          image: mongo
---
### FOR THE SERVICE ###
apiVersion: v1
kind: Service
metadata:
  name: auth-mongo-srv

### FOR THE CLUSTERIP ###
spec:
  type: ClusterIP
  selector:
    app: auth-mongo # "apply auth-mongo-srv to whatever has label app: auth-mongo" .. i.e. our Pod
  ports:
    - name: db # for logging purposes -- for this port
      protocol: TCP
      port: 27017 # port === targetPort (in this case, since 1 pod === 1 container)

      ### FROM THE MONGODB SERVER ###
      targetPort: 27017 # port from ur mongodb server. 
